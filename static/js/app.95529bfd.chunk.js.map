{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","setEdit","useEffect","getWorkMod","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","setWorkMod","value","getItem","w","parse","s","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","checked","isEdit","onChangeText","payload","returnKeyType","placeholder","input","ScrollView","Object","keys","map","key","toDo","EditDone","editInput","CancelEdit","MaterialIcons","name","size","isChecked","handleCheck","iconStyle","borderColor","fillColor","toolbox","EditToDo","Feather","Platform","OS","confirm","Alert","alert","deleteToDo","marginLeft","Fontisto","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","toDoText"],"mappings":"qRAAaA,EACP,QADOA,EAEL,UAFKA,EAGH,U,omBCmBK,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,oBAAS,GAAjC,WAAaO,GAAb,WAEAC,qBAAU,WACRC,IACAC,MACC,IAEH,IASMC,EAAY,SAAOC,GAAP,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAERE,IAAaC,QAzBL,SAyB0BC,KAAKC,UAAUN,KAFzC,sDAIdO,QAAQC,IAAR,MAJc,gEAkBZC,EAAa,SAAOC,GAAP,SAAAT,EAAAC,OAAA,uDACjBZ,EAAWoB,GADM,WAAAT,EAAA,MAEXE,IAAaC,QA1CP,QA0CwBC,KAAKC,UAAUI,KAFlC,6DAKbb,EAAa,0BAAAI,EAAAC,OAAA,kEAAAD,EAAA,MACDE,IAAaQ,QA9CjB,UA6CK,OACXC,EADW,OAGftB,GADEsB,GACSP,KAAKQ,MAAMD,IAHP,6DASbd,EAAY,0BAAAG,EAAAC,OAAA,2EAAAD,EAAA,MAEEE,IAAaQ,QAzDf,WAuDA,QAERG,EAFQ,SAIZpB,EAASW,KAAKQ,MAAMC,IAJR,gDAOdP,QAAQC,IAAR,MAPc,iEAuFlB,OACE,kBAACO,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAACC,EAAA,EAAD,CAAWH,MAAM,UACjB,kBAACD,EAAA,EAAD,CAAMC,MAAOC,EAAOG,QAClB,kBAACC,EAAA,EAAD,CAAkBC,QAnIX,kBAAMb,GAAW,KAoItB,kBAACc,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAOrC,EAAU,QAAUH,IAJ/B,SAUF,kBAACmC,EAAA,EAAD,CAAkBC,QA/IT,kBAAMb,GAAW,KAgJxB,kBAACc,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAOrC,EAAUH,EAAa,UAJlC,YAWJ,kBAACyC,EAAA,EAAD,CACEC,gBAxGU,0BAAA3B,EAAAC,OAAA,mDACD,KAATX,EADU,wDAKRsC,EALQ,OAMTpC,GANS,UAOXqC,KAAKC,MAAQ,CAAExC,OAAMF,UAAS2C,SAAS,EAAOC,QAAQ,KAGzDvC,EAASmC,GAVK,WAAA5B,EAAA,MAWRF,EAAU8B,IAXF,OAYdrC,EAAQ,IAZM,6DAyGV0C,aA3Je,SAACC,GAAD,OAAa3C,EAAQ2C,IA4JpCC,cAAc,OACd1B,MAAOnB,EACP8C,YAAahD,EAAU,cAAgB,2BACvC2B,MAAOC,EAAOqB,QAEhB,kBAACC,EAAA,EAAD,KACG9C,GACC+C,OAAOC,KAAKhD,GAAOiD,KAAI,SAACC,GAAD,OACrBlD,EAAMkD,GAAKtD,UAAYA,EACrB,kBAAC0B,EAAA,EAAD,CAAMC,MAAOC,EAAO2B,KAAMD,IAAKA,GAC5BlD,EAAMkD,GAAKV,OACV,oCACE,kBAACN,EAAA,EAAD,CACEC,gBAAiB,kBA/EpB,SAAOe,GAAP,eAAA1C,EAAAC,OAAA,mDACU,MAApBT,EAAMkD,GAAKpD,KADD,wDAIfE,EAAMkD,GAAN,OAAkBlD,EAAMkD,IAAxB,IAA8BV,QAAQ,IAEhCJ,EANS,OAOVpC,GAPU,UAQZkD,EAAMlD,EAAMkD,KAEfjD,EAASmC,GAVM,WAAA5B,EAAA,MAWTF,EAAU8B,IAXD,4DA+E0BgB,CAASF,IAChC3B,MAAOC,EAAO6B,UACdpC,MAAOjB,EAAMkD,GAAKpD,KAClB2C,aAAc,SAAC3C,GAAD,OA3KR4C,EA2KmC,CAAEQ,MAAKpD,aA1KlEG,EAAS,EAAD,KACHD,GADG,UAEL0C,EAAQQ,IAFH,OAEclD,EAAM0C,EAAQQ,MAF5B,IAEkCpD,KAAM4C,EAAQ5C,UAHjC,IAAC4C,GA4KNC,cAAc,SAEhB,kBAACf,EAAA,EAAD,CAAkBC,QAAS,kBA/D1B,SAACqB,GAClBlD,EAAMkD,GAAN,OAAkBlD,EAAMkD,IAAxB,IAA8BV,QAAQ,IACtC,IAAMJ,EAAQ,OAAQpC,GAAR,UAAgBkD,EAAMlD,EAAMkD,KAC1ChD,GAAQ,GACRD,EAASmC,GACT9B,EAAU8B,GA0DuCkB,CAAWJ,KAC1C,kBAACK,EAAA,EAAD,CACEC,KAAK,SACLC,KAAM,GACNxB,MAAOxC,MAKb,oCACE,kBAAC,IAAD,CACEK,KAAME,EAAMkD,GAAKpD,KACjB4D,UAAW1D,EAAMkD,GAAKX,QACtBV,QAAS,kBA9KT,SAACqB,IACQ,IAAvBlD,EAAMkD,GAAKX,QACbvC,EAAMkD,GAAN,OAAkBlD,EAAMkD,IAAxB,IAA8BX,SAAS,IAEvCvC,EAAMkD,GAAN,OAAkBlD,EAAMkD,IAAxB,IAA8BX,SAAS,IAEzC,IAAMH,EAAQ,OAAQpC,GAAR,UAAgBkD,EAAMlD,EAAMkD,KAC1CjD,EAASmC,GACT9B,EAAU8B,GAsKuBuB,CAAYT,IAC3BO,KAAM,GACNG,UAAW,CAAEC,YAAa,SAC1BC,UAAU,UAEZ,kBAACxC,EAAA,EAAD,CAAMC,MAAOC,EAAOuC,SAClB,kBAACnC,EAAA,EAAD,CAAkBC,QAAS,kBA1F9B,SAACqB,GAChBlD,EAAMkD,GAAN,OAAkBlD,EAAMkD,IAAxB,IAA8BV,QAAQ,IACtC,IAAMJ,EAAQ,OAAQpC,GAAR,UAAgBkD,EAAMlD,EAAMkD,KAC1ChD,GAAQ,GACRD,EAASmC,GACT9B,EAAU8B,GAqFyC4B,CAASd,KACxC,kBAACe,EAAA,EAAD,CAAST,KAAK,OAAOC,KAAM,GAAIxB,MAAOxC,KAExC,kBAACmC,EAAA,EAAD,CACEC,QAAS,kBArIZ,SAAOqB,GAAP,eAAA1C,EAAAC,OAAA,mDACG,QAAhByD,IAASC,GADI,qBAEJC,QAAQ,qCAFJ,8BAIPhC,EAJO,KAISpC,IACNkD,GAChBjD,EAASmC,GANI,WAAA5B,EAAA,MAOPF,EAAU8B,IAPH,+BAUfiC,IAAMC,MAAM,eAAgB,gBAAiB,CAC3C,CAAExE,KAAM,UACR,CACEA,KAAM,WACN+B,QAAS,0BAAArB,EAAAC,OAAA,8DACD2B,EADC,KACepC,IACNkD,GAChBjD,EAASmC,GAHF,WAAA5B,EAAA,MAIDF,EAAU8B,IAJT,gEAdE,6DAqIkBmC,CAAWrB,IAC1B3B,MAAO,CAAEiD,WAAY,KAErB,kBAACC,EAAA,EAAD,CAAUjB,KAAK,QAAQC,KAAM,GAAIxB,MAAOxC,QAMhD,UAOhB,IAAM+B,EAASkD,IAAWC,OAAO,CAC/BlD,UAAW,CACTmD,KAAM,EACNC,gBAAiBpF,EACjBqF,kBAAmB,IAErBnD,OAAQ,CACNoD,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEbpC,MAAO,CACLgC,gBAAiB,QACjBK,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdC,eAAgB,GAChBrD,SAAU,IAEZsB,UAAW,CACTuB,KAAM,GACNC,gBAAiB,QACjBK,gBAAiB,EACjBJ,kBAAmB,EACnBK,aAAc,EACdpD,SAAU,GACVE,MAAO,SAETkB,KAAM,CACJ6B,cAAe,MACfH,gBAAiBpF,EACjB4F,aAAc,GACdH,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdG,WAAY,SACZP,eAAgB,iBAElBQ,SAAU,CACRtD,MAAO,QACPF,SAAU,GACVC,WAAY,OAEd+B,QAAS,CACPiB,cAAe,U","file":"static/js/app.95529bfd.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#1A1C20\",\n};\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst IS_WORK = \"@work\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [edit, setEdit] = useState(false); // 리렌더링을 위해 정의\n\n  useEffect(() => {\n    getWorkMod();\n    loadToDos();\n  }, []);\n\n  const travel = () => setWorkMod(false);\n  const work = () => setWorkMod(true);\n  const onChangeText = (payload) => setText(payload);\n  const onEditChangeText = (payload) => {\n    setToDos({\n      ...toDos,\n      [payload.key]: { ...toDos[payload.key], text: payload.text },\n    });\n  };\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleCheck = (key) => {\n    if (toDos[key].checked === false) {\n      toDos[key] = { ...toDos[key], checked: true };\n    } else {\n      toDos[key] = { ...toDos[key], checked: false };\n    }\n    const newToDos = { ...toDos, [key]: toDos[key] };\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const setWorkMod = async (value) => {\n    setWorking(value);\n    await AsyncStorage.setItem(IS_WORK, JSON.stringify(value));\n  };\n\n  const getWorkMod = async () => {\n    const w = await AsyncStorage.getItem(IS_WORK);\n    if (w) {\n      setWorking(JSON.parse(w));\n    } else {\n      setWorking(true);\n    }\n  };\n\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      if (s) {\n        setToDos(JSON.parse(s));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, checked: false, isEdit: false },\n    };\n    // save to do\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const EditDone = async (key) => {\n    if (!toDos[key].text === \"\") {\n      return;\n    }\n    toDos[key] = { ...toDos[key], isEdit: false };\n\n    const newToDos = {\n      ...toDos,\n      [key]: toDos[key],\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  };\n\n  const EditToDo = (key) => {\n    toDos[key] = { ...toDos[key], isEdit: true };\n    const newToDos = { ...toDos, [key]: toDos[key] };\n    setEdit(true);\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const CancelEdit = (key) => {\n    toDos[key] = { ...toDos[key], isEdit: false };\n    const newToDos = { ...toDos, [key]: toDos[key] };\n    setEdit(false);\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const ResetEdit = () => {\n    // 앱을 시작할 때, Edit을 초기화 하기 위한 함수\n    // 미완성\n    const newToDos = { ...toDos };\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.grey : \"white\",\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {toDos &&\n          Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                {toDos[key].isEdit ? (\n                  <>\n                    <TextInput\n                      onSubmitEditing={() => EditDone(key)}\n                      style={styles.editInput}\n                      value={toDos[key].text}\n                      onChangeText={(text) => onEditChangeText({ key, text })}\n                      returnKeyType=\"done\"\n                    ></TextInput>\n                    <TouchableOpacity onPress={() => CancelEdit(key)}>\n                      <MaterialIcons\n                        name=\"cancel\"\n                        size={24}\n                        color={theme.grey}\n                      />\n                    </TouchableOpacity>\n                  </>\n                ) : (\n                  <>\n                    <BouncyCheckbox\n                      text={toDos[key].text}\n                      isChecked={toDos[key].checked}\n                      onPress={() => handleCheck(key)}\n                      size={25}\n                      iconStyle={{ borderColor: \"white\" }}\n                      fillColor=\"black\"\n                    />\n                    <View style={styles.toolbox}>\n                      <TouchableOpacity onPress={() => EditToDo(key)}>\n                        <Feather name=\"edit\" size={24} color={theme.grey} />\n                      </TouchableOpacity>\n                      <TouchableOpacity\n                        onPress={() => deleteToDo(key)}\n                        style={{ marginLeft: 10 }}\n                      >\n                        <Fontisto name=\"trash\" size={24} color={theme.grey} />\n                      </TouchableOpacity>\n                    </View>\n                  </>\n                )}\n              </View>\n            ) : null\n          )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  editInput: {\n    flex: 0.8,\n    backgroundColor: \"white\",\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n    borderRadius: 5,\n    fontSize: 15,\n    color: \"black\",\n  },\n  toDo: {\n    flexDirection: \"row\",\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  toolbox: {\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""}